<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: meta | miqu.me]]></title>
  <link href="http://miqu.me/blog/categories/meta/atom.xml" rel="self"/>
  <link href="http://miqu.me/"/>
  <updated>2018-11-21T10:05:53+00:00</updated>
  <id>http://miqu.me/</id>
  <author>
    <name><![CDATA[Miguel Angel QuiÃ±ones]]></name>
    <email><![CDATA[miguel@miqu.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My top 5 must-have technical books]]></title>
    <link href="http://miqu.me/blog/2018/01/28/top-5-must-have-technical-books/"/>
    <updated>2018-01-28T19:06:09+00:00</updated>
    <id>http://miqu.me/blog/2018/01/28/top-5-must-have-technical-books</id>
    <content type="html"><![CDATA[<p>Quite recently a team member wanted to suggest interesting technical books to read for a junior engineer. I figured I might as well write my top 5
books here, in no particular order. I believe every Software Engineer should own these books, but reading them is a very good start ;)</p>

<!-- more -->


<h1>The Pragmatic Programmer: From journeyman to master</h1>

<p>If you have to read just one book, specially when starting to write software, it should be <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X">The Pragmatic Programmer</a>. It covers ideas, always
focused on self-improvement, mastery of the craft, and professinalism. I see this book as an extended list of ideas and suggestions for self-improvement,
similar to the <a href="http://www.starling-software.com/employment/programmer-competency-matrix.html">programmer competency matrix</a>. While reading it, it&rsquo;s better to keep growing a list of topics to investigate
further, as the book covers wildly different practices, ideas, and techniques.</p>

<h1>The Art of Unit Testing</h1>

<p><a href="https://www.amazon.com/Art-Unit-Testing-examples/dp/1617290890">This book</a> opened my eyes into the world of unit testing, from a practical (not philosophical) point of view. It introduced me to practical
techniques to use in unit testing. Most imporptantly, it helps understand the crucial understanding of the necessity of maintainable test code, and &lsquo;good&rsquo; tests. I think it&rsquo;s the best introductory book on unit testing. Period.</p>

<h1>Seven Languages in Seven Weeks</h1>

<p>More than a book, <a href="https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X">&ldquo;Seven Languages in Seven Weeks&rdquo;</a> is an exploration into wildly different concepts across programming languages.
It&rsquo;s a book about paradigms, and crucially, sparks the curiosity of why these exist at all. The way that the concepts
are introduced, focusing on the reasons, advantages, disadvantages and design decisions of a language were very insightful for me. If you don&rsquo;t try
the proposed challenges the book still will give you a lot of material to think about and to take ideas from.</p>

<h1>Domain-Driven Design</h1>

<p>Most software projects are about tackling complexity, and I must say many projects fail in this regards. <a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">The book</a> taught me how to think about
the act of writing code in a more abstracted way, as a modelling problem. Eric Evans introduces many concepts that in
my opinion should be as ubiquitous as the OO Design patterns of the <a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Gang of Four book</a>.</p>

<h1>The Algorithm Design Manual</h1>

<p>I prefer <a href="https://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1848000693">&ldquo;The Algorithm Design Manual&rdquo;</a> over the canonical <a href="https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844">&ldquo;Introduction to Algorithms&rdquo;</a>, because of the &lsquo;Catalog&rsquo; section. The section focuses on problems first, and acts as an index to get ideas for solutions. This section alone is very helpful, not only for practical reasons, but also to understand motivations and see the breath
of problems tackled by algorithms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knowing when to delete code]]></title>
    <link href="http://miqu.me/blog/2016/08/16/knowing-when-to-delete-code/"/>
    <updated>2016-08-16T20:04:04+00:00</updated>
    <id>http://miqu.me/blog/2016/08/16/knowing-when-to-delete-code</id>
    <content type="html"><![CDATA[<p>Much of the literature and writing related to sofware development focuses on the creation, new ideas, fresh ideas and things to improve in your next project. But when is it a good moment to delete the old stuff in an long term project? Here&rsquo;s my short rant about this; I recently deleted a chunk of code in my current project and just felt I wanted to write my thoughts.</p>

<!-- more -->


<h1>Short-lived code</h1>

<p>Working on application development field, it is very normal that some code is very short lived. If you&rsquo;re looking to build systems and generic components then you&rsquo;re generally out of luck. Most Application code is generally short lived. In my opinion we just need to know how to deal with it.</p>

<p>Products evolve, ideas and markets change, and the code implementing those concepts has to change to reflect the direction of an application. If your code doesn&rsquo;t closely relate or express the domain of your application, you&rsquo;re bound to have design problems, miscomunication and likely many bugs. Application code is very likely to become legacy in a very short time. That time might be even less than 1 or 2 years.</p>

<h1>Legacy code</h1>

<p>There isn&rsquo;t consensus on what makes code reach the dreaded <em>legacy</em> status. The definition has changed since it&rsquo;s first introduction, and nowadays we generally consider legacy the code that we didn&rsquo;t write. See the <a href="https://en.wikipedia.org/wiki/Legacy_code">wikipedia entry</a>:</p>

<blockquote><p>&hellip;source code inherited from someone else and source code inherited from an older version of the software</p></blockquote>

<p>Or another definition:</p>

<blockquote><p>Michael Feathers introduced a definition of legacy code as code without tests, which reflects the perspective of legacy code being difficult to work with in part due to a lack of automated regression tests</p></blockquote>

<p>Many programmers generally call legacy code anything that they didn&rsquo;t write. While this is a very harsh treament of somebody&rsquo;s effort and time, it will mean that <strong>your</strong> code will become legacy in very short time as well.</p>

<h1>Refactoring vs Rewriting</h1>

<p>Legacy code is often mentioned when refactoring. The effort of writing some piece of functionality again versus the cost of refactoring code is something we all need to consider at some point. I think that you should always evaluate this in the light of your project and always ponder the real end-user value of your rewrite or refactor. Sometimes if something works <a href="http://www.cnbc.com/2016/05/25/us-military-uses-8-inch-floppy-disks-to-coordinate-nuclear-force-operations.html">it&rsquo;s better not to change it</a>.</p>

<p>My view is that we should always try to do small refactorings, even if that implies rewriting small parts of functionality. Big rewrites never pay off in my experience, but hey I might be wrong. Read Martin Fowler&rsquo;s <a href="http://martinfowler.com/articles/workflowsOfRefactoring/">excellent entry</a> on refactoring.</p>

<h1>Clean after yourself</h1>

<p>I&rsquo;m more concerned about dead code than necessary refactoring efforts. We rarely spend the time to analyze our projects and search for dead code. Things we left out after refactoring or an old clean up. The engineering team is responsible to clean the lower decks of the ship, so to speak, and it&rsquo;s our duty to ensure that the environment we work in is clean and up to date. Nobody else will do it otherwise.</p>

<p>I think developers need to emotionally detach themselves from code they wrote, and be ready to delete things that don&rsquo;t work or are no longer relevant. ABTests, temporary user migrations, temporary bridging code between legacy systems and new systems. I think we shouldn&rsquo;t save idle and not used code &lsquo;just in case we need it&rsquo;, as it adds to the cruft of the project. You&rsquo;ll forget after a while and nobody will know what to do with it. Just delete it.</p>

<p>To conclude, if you introduce any kind of prize contest in your engineering team, then please, give a prize to the engineer that deleted the most lines of code, not the one that wrote the most. You can be sure that that engineer didn&rsquo;t introduce any bugs nor regressions.</p>

<p>Ripley signing off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dear SDK developer]]></title>
    <link href="http://miqu.me/blog/2016/04/22/dear-sdk-developer/"/>
    <updated>2016-04-22T11:50:32+00:00</updated>
    <id>http://miqu.me/blog/2016/04/22/dear-sdk-developer</id>
    <content type="html"><![CDATA[<p>As an application developer I get to use many third party code to integrate it into my current project. I want to share a checklist of things a user of an SDK really appreciates.</p>

<!-- more -->


<h1>Documentation</h1>

<p>This is the most important part of any SDK, be it open source or closed source. Users don&rsquo;t need to understand your code, or learn by themselves how to use your APIs. Maintaining documentation is a big part of maintaining an SDK, and it goes far beyond documenting the code.</p>

<h1>Documentation!</h1>

<p>Really, this is very important and lacking on many commercial SDKs. Please include examples, rationale and FAQ.</p>

<h1>Documentation!!</h1>

<p>Don&rsquo;t get it? Just some examples of great additional documentation:</p>

<ul>
<li>Quick: <a href="https://github.com/Quick/Quick/tree/master/Documentation/en-us">Quick</a></li>
<li>RxSwift: <a href="https://github.com/ReactiveX/RxSwift/tree/master/Documentation">RxSwift</a></li>
<li>YapDatabase: <a href="https://github.com/yapstudios/YapDatabase/wiki">YapDatabase</a></li>
</ul>


<h1>Please, open source your SDK</h1>

<p>There&rsquo;s nothing more annonying than encountering bugs or unexpected behaviour and having to skim through logs, documentation and trial and error tests. This can happen anytime when using unfamiliar APIs, and having the source to understand what goes wrong is the first big benefit of open source SDKs. Furthermore, if you accept contributions from the community, you might get some developers helping with debugging and fixing issues.</p>

<p>Having open issue discussions help with questions and faster communication. A good example is projects on Github. See <a href="https://github.com/snowplow/snowplow-objc-tracker/issues/274">an example of Snowplow devs just guiding me over my confusion</a>.</p>

<p>Surely your business model is not dependant on you not publishing the source code that interacts with your platform?</p>

<h1>Changelogs</h1>

<p>Any developer including third party code in an application is assuming the quality of your code into theirs. They also have the final accountability for the end users, who don&rsquo;t care where a bug or crash is coming from. Good engineering practice will make users of your SDK wary of changes you introduce, so a changelog is very important to let them know what changed.</p>

<p>And please, don&rsquo;t just add <em>stability improvements</em>.</p>

<h1>Version migration documentation</h1>

<p>More documentation! This is very special and also very important. If you maintain an SDK for long enough you&rsquo;re necessarily going to need to break APIs. It&rsquo;s at this time that users of your SDK will suffer the most, because an application developer doesn&rsquo;t track your development on a day to day basis. It&rsquo;s very crucial for the happiness of your users that you provide good examples of how to transition to new APIs with the least effort possible. I like this migration guide from <a href="http://snowplowanalytics.com/blog/2016/01/18/snowplow-objective-c-tracker-0.6.0-released/">Snowplow</a> a lot.</p>

<h1>Your SDK is not the only one</h1>

<p>Many examples you can find are very naive in terms of what the host application code contains. Don&rsquo;t expect that the user of the SDK will be using your code exclusively. Compare these two <em>getting started</em> examples from very respectable SDKs:</p>

<p><strong>Facebook</strong>. From their <a href="https://developers.facebook.com/docs/ios/getting-started#delegate">docs</a>.</p>

<pre><code class="objc">//  AppDelegate.m
#import &lt;FBSDKCoreKit/FBSDKCoreKit.h&gt;

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
  [[FBSDKApplicationDelegate sharedInstance] application:application
    didFinishLaunchingWithOptions:launchOptions];
  // Add any custom logic here.
  return YES;
}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
  BOOL handled = [[FBSDKApplicationDelegate sharedInstance] application:application
    openURL:url
    sourceApplication:sourceApplication
    annotation:annotation
  ];
  // Add any custom logic here.
  return handled;
}
</code></pre>

<p><strong>Branch</strong>. From their <a href="https://dev.branch.io/getting-started/sdk-integration-guide/guide/ios/#start-a-branch-session">docs</a>.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Respond to URI scheme links</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="bp">UIApplication</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">application</span> <span class="nf">openURL:</span><span class="p">(</span><span class="bp">NSURL</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">url</span> <span class="nf">sourceApplication:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">sourceApplication</span> <span class="nf">annotation:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">annotation</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// pass the url to the handle deep link call</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">Branch</span> <span class="n">getInstance</span><span class="p">]</span> <span class="nl">handleDeepLink</span><span class="p">:</span><span class="n">url</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// do other deep link routing for the Facebook SDK, Pinterest SDK, etc</span>
</span><span class='line'><span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Respond to Universal Links</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application</span><span class="p">:(</span><span class="bp">UIApplication</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">application</span> <span class="nl">continueUserActivity</span><span class="p">:(</span><span class="n">NSUserActivity</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">userActivity</span> <span class="nl">restorationHandler</span><span class="p">:(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="n">restorableObjects</span><span class="p">))</span><span class="n">restorationHandler</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">handledByBranch</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Branch</span> <span class="n">getInstance</span><span class="p">]</span> <span class="nl">continueUserActivity</span><span class="p">:</span><span class="n">userActivity</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">handledByBranch</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Both SDKs provide you with a naive example without explaining what the return results are, and the eventuality of an application doing <strong>more</strong> work than actually using their SDK. Seems a very contrived example but consider that a clever engineer will not copy-paste your example code, but integrate it into their application where it fits best.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Poor man's functional programming]]></title>
    <link href="http://miqu.me/blog/2015/08/31/poor-mans-functional-programming/"/>
    <updated>2015-08-31T20:00:00+00:00</updated>
    <id>http://miqu.me/blog/2015/08/31/poor-mans-functional-programming</id>
    <content type="html"><![CDATA[<p>It&rsquo;s a very exciting time to be an iOS or Mac developer. The platform moves very fast and we got a new toy (language) to play with: Swift. It&rsquo;s the perfect time to reevaluate, learn and evolve as a programmer, because you will be forced to adopt this new language (yes, I think Swift is the future, 100%).</p>

<p>I want to relate this to the fact that most iOS engineers, or mobile application developers, are traditionally familiar with Object Oriented Programming paradigm. But Swift offers more than different syntax and OOP.</p>

<p>Iâm referring to <em>some</em> features inspired by functional languages. If youâve ever had an interest, but never the chance or motivation to go forth and look into this paradigm, now it&rsquo;s the perfect time to do it.</p>

<!-- more -->


<h1>Functional programming is&hellip;</h1>

<p>I donât want to start reviewing what functional programming is, there are <a href="http://harlankellaway.com/blog/2015/08/10/swift-functional-programming-intro/">excellent</a> resources out there, <a href="https://www.objc.io/books/">check them out</a>.</p>

<p>I want to point out how a beginner, somebody who starts learning Functional Programming (FP), might feel:</p>

<ul>
<li>Too abstract</li>
<li>Not applicable to my problems</li>
<li>For academics</li>
<li>What does even âpureâ mean?</li>
<li>I <strong>need</strong> to mutate stuff!</li>
<li>Meh, Iâll go back to my familiar way of doing things</li>
</ul>


<p>Thereâs a higher barrier of entry to learn how to think and code programs which are more âfunctionalâ. The concepts are abstract,  and the benefits are often described as <em>itâs more functional</em> without emphasis of what you are actually gaining. Also thereâs the problem that many times all is explained by simple examples. But every programmer knows thereâs a huge difference between toy programs and real big projects.</p>

<h1>Flame wars</h1>

<p>Youâll find engineers and computer scientists that believe that the <em>only and true</em> way of doing things is of course thinking functionally, and weâve all been doing it wrong during the last decades. The math is the only source of truth and validity, hence FP is the only way.</p>

<p>Theyâve got their very valid reasons to think this way, but my opinion is that many people familiar with FP start to use higher-level vocabulary, and describe conventions and problems in a way that might seem foreign and strange for somebody who is not used to those terms. Rob Napier has <a href="http://robnapier.net/haskell-overlords">an excellent article describing this</a>.</p>

<p>Computer science, and programming in particular, is a curious field where people take sides around things that may seem totally absurd for an outsider: Vim vs Emacs, Windows vs Mac, Linux vs everything else, Ruby vs Python, OOP vs FP.</p>

<p>Do we really need to fight over who is right, instead of using the tools that are most appropriate to do our job? Iâm totally on the side of moving on and being pragmatic about learning, and eventually as growing as a software engineer. By looking at different ways of solving a problem you can only get better at what you do, not worse, because you will have the ability to make an informed choice.</p>

<p>Iâd love to see the people who are experts or versed in FP to reach out and share knowledge in a way that can be understood by beginners. If we really want people to be aware of the benefits of using a different paradigm, we should make it approachable to start with.</p>

<h1>Poor manâs functional programming</h1>

<p>I would like to think that for most engineers, the choice of paradigm on our day to day work is not a clear one. Thus we will have direct benefit from a language that lets you choose. Using such a language we will be able to write code in an OOP or FP way where it benefits the most. And it seems Iâm <a href="https://realm.io/news/altconf-saul-mora-object-orientated-functional-programming/">not</a> the <a href="http://www.johndcook.com/blog/2009/03/23/functional-in-the-small-oo-in-the-large/">first</a> to think about this.</p>

<p>Coming back to Swift, this is precisely what you can do with it. You can choose programming styles depending on what your problem is, the framework you work with, and even the team you work on.</p>

<p>This flexibility does comes with a price though: The functional features of the language are not as rich as other, <em>purer</em> languages. This is the point of my essay: With Swift, and given the normal users of the language (myself included), we will be able to do <strong>Poor manâs functional programming</strong>. A style that tries to mix the best of both paradigms.</p>

<p>Weâll make mistakes as we learn, but hey thatâs part of our job. Do you like code you wrote 6 months ago? I know I donât.</p>

<h1>Moving on</h1>

<p>I like to be <a href="https://pragprog.com/book/tpp/the-pragmatic-programmer">pragmatic</a> rather than zealous. And I think Swift brings an excellent opportunity to learn more about other ways of thinking about building software, different abstractions, and how to fit those into our day to day work as iOS developers.</p>

<p>Swift, as <a href="http://www.scala-lang.org/">other modern languages</a>, offers a unique opportunity to learn and grow. Itâs a very exciting field we work on.</p>

<p><em>Aside: Sources to check the âtensionâ between OOP and FP:</em></p>

<ul>
<li><a href="http://www.johndcook.com/blog/2009/03/23/functional-in-the-small-oo-in-the-large/">Functional on the small, OO in the large</a></li>
<li><p><a href="https://realm.io/news/altconf-graham-lee-i-have-no-idea-what-i-m-doing/">I have no idea what Iâm doing</a></p></li>
<li><p><a href="http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end">OOP is an expensive disaster</a></p></li>
<li><p><a href="http://stackoverflow.com/questions/2835801/why-hasnt-functional-programming-taken-over-yet">Why hasnât functional programming taken over yet</a></p></li>
</ul>


<p><em>And the list goes on and on&hellip;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freehand Drawing]]></title>
    <link href="http://miqu.me/blog/2015/08/20/freehand-drawing/"/>
    <updated>2015-08-20T20:09:40+00:00</updated>
    <id>http://miqu.me/blog/2015/08/20/freehand-drawing</id>
    <content type="html"><![CDATA[<p>Yesterday my last post on the series âLetâs build Freehand Drawing for iOSâ has been published at Badoo Tech blog. Itâs been a very good experience for me, and of course I recommend you visit the tutorials if you are interested.</p>

<p>I divided the tutorials in 3 parts:</p>

<ul>
<li><a href="https://techblog.badoo.com/blog/2015/06/15/lets-build-freehand-drawing-in-ios-part-1/">Part 1</a>: Introduces the feature and a naive implementation</li>
<li><a href="https://techblog.badoo.com/blog/2015/06/29/lets-build-freehand-drawing-in-ios-part-2/">Part 2</a>: Adds undo functionality, refactoring along the way</li>
<li><a href="https://techblog.badoo.com/blog/2015/08/18/lets-build-freehand-drawing-in-ios-part-3/">Part 3</a>: Improves stroke to make it look smoother</li>
</ul>


<h1>Building tutorials is hard</h1>

<p>This series has been my first take on writing technical tutorials. And I must say that itâs a lot harder than I thought. You need to keep track of the content, code correctness, and the pace of the articles so itâs readable and understandable. Coding while writing an article is challenging, but the experience has been very gratifying.</p>

<p>I also get to brag about something I was really happy to build for the <a href="http://bumble.com/">Bumble</a> project. So I think Iâll definitely write other tutorials in the future.</p>
]]></content>
  </entry>
  
</feed>
